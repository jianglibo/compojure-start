FluxibleApp

Instantiated once across all requests, this holds settings and interfaces that are used across all requests/sessions.

Constructor

Creates a new application instance with the following parameters:

options: An object containing the application settings
options.appComponent (optional): Stores your top level React component for access using getAppComponent()
createContext(contextOptions)

Creates a new FluxibleContext instance passing the contextOptions into the constructor. Also iterates over the plugins calling plugContext on the plugin if it exists in order to allow dynamic modification of the context.

plug(plugin)

Allows custom application wide settings to be shared between server and client. Also allows dynamically plugging the FluxibleContext instance each time it is created by implementing a plugContext function that receives the context options.

getPlugin(pluginName)

Provides access to get a plugged plugin by name.

registerStore(store)

Passthrough to dispatchr's registerStore function

getAppComponent()

Provides access to the options.appComponent that was passed to the constructor. This is useful if you want to create the application in a file that is shared both server and client but then need to access the top level component in server and client specific files.

dehydrate(context)

Returns a serializable object containing the state of the FluxibleApp and passed FluxibleContext instances. This is useful for serializing the state of the application to send it to the client. This will also call any plugins which contain a dehydrate method.

rehydrate(state)

Takes an object representing the state of the FluxibleApp and FluxibleContext instances (usually retrieved from dehydrate) to rehydrate them to the same state as they were on the server. This will also call any plugins which contain a rehydrate method.

FluxibleContext

Instantiated once per request/session, this provides isolation of data so that it is not shared between requests on the server side.

Constructor

Creates a new context instance with the following parameters:

options: An object containing the context settings
options.app: Provides access to the application level functions and settings
executeAction(action, payload, callback)

This is the entry point into an application's execution. The initial action is what begins the flux flow: action dispatches events to stores and stores update their data structures. On the server, we wait for the initial action to finish and then we're ready to render using React. On the client, the components are already rendered and are waiting for store change events.

Parameters:

action: A function that takes three parameters: actionContext, payload, done
payload: the action payload
done: the callback to call when the action has been completed

var action = function (actionContext, payload, done) {
   // do stuff
   done();
};
context.executeAction(action, {}, function (err) {
   // action has completed
});
plug(plugin)

Allows custom context settings to be shared between server and client. Also allows dynamically plugging the ActionContext, ComponentContext, and StoreContext to provide additional methods.

getActionContext()

Generates a context interface providing access to only the functions that should be called from actions. By default: dispatch, executeAction, and getStore.

This action context object is used every time an executeAction method is called and is passed as the first parameter to the action.

getComponentContext()

Generates a context interface providing access to only the functions that should be called from components. By default: executeAction, getStore. executeAction does not allow passing a callback from components so that it enforces actions to be send and forget.

This context interface should be passed in to your top level React component and then sent down to children as needed. These components will now have access to listen to store instances, execute actions, and access any methods added to the component context by plugins.

getStoreContext()

Generates a context interface providing access to only the functions that should be called from stores. By default, this is empty. See store constructor interface for how to access this from stores.

dehydrate()

Returns a serializable object containing the state of the FluxibleContext and its Dispatchr instance. This is useful for serializing the state of the current context to send it to the client. This will also call any plugins whose plugContext method returns an object containing a dehydrate method.

rehydrate(state)

Takes an object representing the state of the FluxibleContext and Dispatchr instances (usually retrieved from dehydrate) to rehydrate them to the same state as they were on the server. This will also call any plugins whose plugContext method returns an object containing a rehydrate method.
